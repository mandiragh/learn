Day 1: Github Learning 
- Download Git and signup to Github 

Notes:


Github and Learnings 

Version Control: management of Changes made to documents, computer programs, large web sites and other collection of info
Changes: Versions
What Version Control: Collaboration, Merge the works done by all different users. 
Git Repository:
Back up: Central server has all the files and these are also saved inside the local machine as a local copy. 
VC: - Analyze the project, what changed, when and how many details were changed, evolved versions are monitored.

Version Control Tools:
Git
Apache, SVN
CVS
Mercurial


INTRODUCTION:
Git: Version Control Tool helps push and pull the data

Github: Code Hosting Platform for Version Control Collaboration
Allows user to host users central repository in a remote server
Social Network for developers (Share the code to see the projects)

Repository: Data Space, save data in a particular place, connected via HTTP

##BASIC COMMANDS: 
- Function
- Use

$ git init
// Initialize Local Git Repository
Go into folder via Terminal and type

$ git add <file>
// Add Files to Index
To commit files

$ git status
//Check Status of Working Tree
Puts in a staging area

$ git commit
//Commit Changes In Index
Puts in a local repository

$ git push -u origin <branch name>
// Push it to Remote repository
Uploads on the github profile

$ git pull
// Pull Latest from Remote Repo
Downloads the file changes from remote repo

$ git clone 
// Clone Repository into a new directory
Downloads the copy remote repo/ file 

$ git config –global user.name ‘Mandira Ghimire’
//Connects to github account


$ git config - -global user.email ‘‘mandirag469@gmail.com’
//Connects to github account and remote repository 


$ git rm --cached File name
$ git rm - -cached index.html
//


$ git add*.html

$ git commit -m ‘message of the commit’’
// to commit modified files


$ git checkout ‘branch name’ 
// to switch the branch 


Clear 
// to clear the screen and start again


$ git merge file name 
//Merge files


$ git add README.md 
//to make it public and read
.md for clear understanding 


$ git clone paste the link 
// to make a copy on your local repository 

Press q key to come out of git log 
Press :wq to get out of insert


For windows: Git.fcm.com or Git bash :Command line tool 


##COMMAND 

Function
Create a file name and click right to start git bash to work on the project and create files inside the folder:

Example- 
Touch index.html
Touch app.js




$ git add*.html
Add all the html files 
$ git add . 

(takes to different tab, press escape in the front of initial commit 
All all the sub files from folder
:wq to come back from the committed fies 
Commit all the files on folder
$ git status (to check the staging or track the change in the files before committing)


$ git commit -m ‘changed file name’
$git commit -m ‘changed app.js’

##IGNORING FILES: 
- For sensitive info and passwords or personal files 
- For files like .DS_STORE (where Mac keeps to track files within the folder, so do not share)

$touch .gitignore 
// to ignore the files in given folder or repository
*** lIST of entry to ignore:
- .DS_Store
- .vscode/
- authentication.js
- node_modules
- notes/
- **/*-todo.md

CREATING Global Ignore Files:
git config --global core.excludesfile [file]

ClEARING the cache: (deletes the files that are cached recursivley)
git rm -r --cached .

RENAME , MOVE , AND DELETE FILES 
- git mv oldfilename to newfilename 

- git diff '17d401d' ( shows the difference between renwmed or duplicated files)

- git log --oneline (helps to see the current changes istead of all)

- git lens (to find the difference)

use editor to amend and rebase 
CHANGING HISTORY:
- git commit --amend (to create the changes)
- git log --online to check the changes 

**** git reset --hard 17d401d (means delete things on the commit)- Do not do it ****

REBASING: changing the commit history 
git rebase <branch>/<commit>
- git rebase --interactive <branch>/<commit>
- git rebase -i HEAD~# (use this)
- git rebase -i --root

###BRANCHES: ability to edit and change without worrying about the original
git branch # * main (does not have branch)
we have to copy of an existing branch 
- git switch -c NAME
- git checkout -b NAME 

MERGING: merge the changes from the branch to main branch
- git checkout main (going from branch to main)
- git branch 'xxx'
- git merge 'xxx' (merging the chnages from fix to main)


DELETE the BRANCH
git branch --delete NAME
git branch -d NAME
git brnach -D NAME

GIT Flow
- Feature/fix branch
- Make Changes
- Merge to master
- Delete old branch 

MERGE Conflict:
- 

GIT stash and clean:
**STACHING CODE: to temporarly keep them in storage folder
- git stash list (what is stored)
- git stash apply (apply stash set of changes)
- git stash pop (remove stash from list)

********
- git clean -n #dry run
- git clean -d #directories
- git clean -f #force

GIT PUSH:
git remote add NAME URL
- git remote remove NAME
- git rename OLDNAME NEWNAME 
- git remote -v 

- git push -u 
- git push -all
- git branch -set-upstream-to <origin/remote-branch>( connect into remote repo)

#PULL REQUESTS AND MERGE PULL REQUESTS
- from website use the pull repo button

# Learning Markdown in Github for README files
- Creating headlines with SYNTAX: Headings
# for 1 
## for 2

*Italic* or _Italic_
**Bold** or __Bold__
~~Strikethrough~~

##  Unordered  Lists 
- Item 1
- Item 2
  - Subitem 1
  - Subitem 2

  For Inline codes:
  `inline code` (it shows the letter leads to code in backend)

# Addition of FOOTNOTES:
- 















